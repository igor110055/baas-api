const { DataTypes } = require("sequelize");
const Role = require("../../../_role/role.dto");

module.exports = model;

function model(sequelize) {
  const attributes = {
    id: {
      type: DataTypes.UUID,
      primaryKey: true,
      allowNull: true,
      defaultValue: DataTypes.UUIDV4,
    },
    firstName: { type: DataTypes.STRING, allowNull: true },
    lastName: { type: DataTypes.STRING, allowNull: true },
    username: { type: DataTypes.STRING, allowNull: true },
    password: { type: DataTypes.STRING, allowNull: true },
    role: { type: DataTypes.STRING, allowNull: false, defaultValue: Role.USER },
    first_name: { type: DataTypes.STRING, allowNull: true },
    last_name: { type: DataTypes.STRING, allowNull: true },
    email: { type: DataTypes.STRING, allowNull: true },
    card_email: { type: DataTypes.STRING, allowNull: true },
    email_verified_at: { type: DataTypes.STRING, allowNull: true },
    dob: { type: DataTypes.STRING, allowNull: true },
    nationality: { type: DataTypes.STRING, allowNull: true },
    passport_id: { type: DataTypes.STRING, allowNull: true },
    maiden_name: { type: DataTypes.STRING, allowNull: true },
    pep: { type: DataTypes.STRING, allowNull: true },
    contactNumber: { type: DataTypes.STRING, allowNull: true },
    password: { type: DataTypes.STRING, allowNull: true },
    cardLimit: { type: DataTypes.STRING, allowNull: true },
    status: {
      type: DataTypes.ENUM({
        values: [
          "N.A",
          "PDF downloaded",
          "Pending Payment",
          "Card Activated",
          "Pending Stake",
          "Active",
          "Act Selfie DL-ed",
          "Manually staked"
        ],
      }),
      allowNull: true,
    },
    remember_token: { type: DataTypes.STRING, allowNull: true },
    created_at: { type: DataTypes.DATE, allowNull: true },
    updated_at: { type: DataTypes.DATE, allowNull: true },
    countryCode: { type: DataTypes.INTEGER, allowNull: true },
    cardNumber: { type: DataTypes.STRING, allowNull: true },
    card_activated: {
      type: DataTypes.TINYINT,
      allowNull: true,
      defaultValue: 0,
    },
    card_img: { type: DataTypes.STRING, allowNull: true },
    card_type: { type: DataTypes.STRING, allowNull: true },
    jdbCardNumber1: { type: DataTypes.STRING, allowNull: true },
    jdbCardNumber2: { type: DataTypes.STRING, allowNull: true },
     jdbCardNumber2: { type: DataTypes.STRING, allowNull: true },
     stakeapprove: { type: DataTypes.BOOLEAN, allowNull: true },
     staking: { type: DataTypes.BOOLEAN, allowNull: true },
     stakedate: { type: DataTypes.STRING, allowNull: true },
    cardStatus: {
      type: DataTypes.ENUM({
        values: [
          "unpaid",
          "paid",
          "pending",
          "assigned",
          "verified",
          "blocked",
        ],
      }),
      allowNull: true,
    },
    jdbCardStatus1: {
      type: DataTypes.ENUM({
        values: [
          "unpaid",
          "paid",
          "pending",
          "assigned",
          "verified",
          "blocked",
        ],
      }),
      allowNull: true,
    },
    jdbCardStatus2: {
      type: DataTypes.ENUM({
        values: [
          "unpaid",
          "paid",
          "pending",
          "assigned",
          "verified",
          "blocked",
        ],
      }),
      allowNull: true,
    },
    google2fa_enable: { type: DataTypes.TINYINT, allowNull: true },
    google2fa_secret: { type: DataTypes.STRING, allowNull: true },
    google2fa_qr: { type: DataTypes.STRING, allowNull: true },
    countryName: { type: DataTypes.STRING, allowNull: true },
    cardCount: { type: DataTypes.INTEGER, allowNull: true },
    appid: { type: DataTypes.STRING, allowNull: true },
    is_kyc_approved: {
      type: DataTypes.ENUM({ values: ["0", "1"] }),
      allowNull: true,
    },
    kycres: { type: DataTypes.STRING, allowNull: true },
    balance_usd: { type: DataTypes.STRING, allowNull: true },
    balance_btc: { type: DataTypes.STRING, allowNull: true },
    balance_eth: { type: DataTypes.STRING, allowNull: true },
    address1: { type: DataTypes.STRING, allowNull: true },
    address2: { type: DataTypes.STRING, allowNull: true },
    city: { type: DataTypes.STRING, allowNull: true },
    state: { type: DataTypes.STRING, allowNull: true },
    pincode: { type: DataTypes.STRING, allowNull: true },
    d_country: { type: DataTypes.STRING, allowNull: true },
    inspectionId: { type: DataTypes.STRING, allowNull: true },
    deleted_at: { type: DataTypes.DATE, allowNull: true },
    urnNumber: { type: DataTypes.STRING, allowNull: true },
    jdbAccountNo1: { type: DataTypes.STRING, allowNull: true },
    jdbAccountNo2: { type: DataTypes.STRING, allowNull: true },
    is_kyc_details: {
      type: DataTypes.ENUM({ values: ["0", "1"] }),
      allowNull: true,
    },
    vendor_id: { type: DataTypes.INTEGER, allowNull: true },
    img_sign: { type: DataTypes.STRING, allowNull: true },
    partner_fee: { type: DataTypes.STRING, allowNull: true },
    company_name: { type: DataTypes.STRING, allowNull: true },
    card_applied: { type: DataTypes.TINYINT, allowNull: true },
    is_doc_downloaded: { type: DataTypes.TINYINT, allowNull: true },
    kyc_country: { type: DataTypes.STRING, allowNull: true },
    response_check: { type: DataTypes.STRING, allowNull: true },
    passport_file_signature: { type: DataTypes.STRING, allowNull: true },
    role_id: { type: DataTypes.INTEGER, allowNull: true },
    title: { type: DataTypes.STRING, allowNull: true },
    full_name: { type: DataTypes.STRING, allowNull: true },
    id_type: { type: DataTypes.STRING, allowNull: true },
    id_no: { type: DataTypes.STRING, allowNull: true },
    id_issued_date: { type: DataTypes.STRING, allowNull: true },
    passport_expiry_date: { type: DataTypes.STRING, allowNull: true },
    gender: { type: DataTypes.STRING, allowNull: true },
    marital_status: { type: DataTypes.STRING, allowNull: true },
    mailing_address_line_1: { type: DataTypes.STRING, allowNull: true },
    mailing_address_line_2: { type: DataTypes.STRING, allowNull: true },
    company_name: { type: DataTypes.STRING, allowNull: true },
    emergency_contact_person: { type: DataTypes.INTEGER, allowNull: true },
    emergency_contact_telephone_number: {
      type: DataTypes.INTEGER,
      allowNull: true,
    },
    place_of_id_issued: { type: DataTypes.STRING, allowNull: true },
    first_name: { type: DataTypes.STRING, allowNull: true },
    last_name: { type: DataTypes.STRING, allowNull: true },
    contactNumber: { type: DataTypes.INTEGER, allowNull: true },
    dob: { type: DataTypes.STRING, allowNull: true },
    email: { type: DataTypes.STRING, allowNull: true },
    address1: { type: DataTypes.STRING, allowNull: true },
    address2: { type: DataTypes.STRING, allowNull: true },
    state: { type: DataTypes.STRING, allowNull: true },
    pincode: { type: DataTypes.INTEGER, allowNull: true },
    city: { type: DataTypes.STRING, allowNull: true },
    countryName: { type: DataTypes.STRING, allowNull: true },
    nationality: { type: DataTypes.STRING, allowNull: true },
    passport_id: { type: DataTypes.STRING, allowNull: true },
    img_sign: { type: DataTypes.STRING, allowNull: true },
    passport_file_signature: { type: DataTypes.STRING, allowNull: true },
    passport_file_signature_biopic: { type: DataTypes.STRING, allowNull: true },
    residence_city: { type: DataTypes.STRING, allowNull: true },
    residence_countryName: { type: DataTypes.STRING, allowNull: true },
    residence_pincode: { type: DataTypes.STRING, allowNull: true },
    residence_state: { type: DataTypes.STRING, allowNull: true },
    suspended: { type: DataTypes.INTEGER, allowNull: true, defaultValue: 0 },
    suspended_reason: {
      type: DataTypes.STRING,
      allowNull: true,
      defaultValue: "NA",
    },
    userAddress: { type: DataTypes.STRING, allowNull: true },
    partnerName: { type: DataTypes.STRING, allowNull: true },
    affiliate: { type: DataTypes.BOOLEAN, allowNull: true },
    emergencycountryCode: { type: DataTypes.INTEGER, allowNull: true },
    OTP: { type: DataTypes.INTEGER, allowNull: true },
  };

  const options = {
    defaultScope: {
      // exclude hash by default
      attributes: { exclude: ["hash"] },
    },
    scopes: {
      // include hash with this scope
      withHash: { attributes: {} },
    },
  };

  return sequelize.define("users", attributes, options);
}
